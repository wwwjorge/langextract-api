version: '3.8'

# Portainer Stack Configuration for LangExtract API
# Optimized for production deployment with GitHub Container Registry

services:
  langextract-api:
    image: ghcr.io/wwwjorge/langextract-api:${APP_VERSION:-latest}
    container_name: langextract-api-${STACK_NAME:-prod}
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      # API Configuration
      - API_KEY=${API_KEY}
      - DEFAULT_MODEL=${DEFAULT_MODEL:-llama3.2:3b}
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-50}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_METHODS=${CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      - CORS_HEADERS=${CORS_HEADERS:-Content-Type,Authorization,X-API-Key}
      
      # Timeout Configuration
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-300}
      - LLM_TIMEOUT=${LLM_TIMEOUT:-180}
      
      # Provider URLs
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - GEMINI_BASE_URL=${GEMINI_BASE_URL:-https://generativelanguage.googleapis.com/v1beta}
      - CLOUDFLARE_BASE_URL=${CLOUDFLARE_BASE_URL:-https://api.cloudflare.com/client/v4/accounts}
      
      # API Keys (set in Portainer environment variables)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      
      # Security Headers
      - X_FRAME_OPTIONS=${X_FRAME_OPTIONS:-SAMEORIGIN}
      - REFERRER_POLICY=${REFERRER_POLICY:-strict-origin-when-cross-origin}
      - X_XSS_PROTECTION=${X_XSS_PROTECTION:-1; mode=block}
      - X_CONTENT_TYPE_OPTIONS=${X_CONTENT_TYPE_OPTIONS:-nosniff}
      - CONTENT_SECURITY_POLICY=${CONTENT_SECURITY_POLICY:-default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https: wss:; frame-ancestors 'self'; base-uri 'self'; form-action 'self'}
    volumes:
      - langextract-uploads-${STACK_NAME:-prod}:/app/uploads
      - langextract-logs-${STACK_NAME:-prod}:/app/logs
      - langextract-cache-${STACK_NAME:-prod}:/app/cache
    networks:
      - langextract-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-512M}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      # Traefik Configuration
      - "traefik.enable=true"
      - "traefik.http.routers.langextract-${STACK_NAME:-prod}.rule=Host(`${DOMAIN:-api.yourdomain.com}`)"
      - "traefik.http.routers.langextract-${STACK_NAME:-prod}.tls=true"
      - "traefik.http.routers.langextract-${STACK_NAME:-prod}.tls.certresolver=letsencrypt"
      - "traefik.http.services.langextract-${STACK_NAME:-prod}.loadbalancer.server.port=8000"
      
      # Security Middlewares
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.sslredirect=true"
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.frameDeny=${FRAME_DENY:-false}"
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.langextract-security-${STACK_NAME:-prod}.headers.browserXssFilter=true"
      
      # Rate Limiting (optional)
      - "traefik.http.middlewares.langextract-ratelimit-${STACK_NAME:-prod}.ratelimit.average=${RATE_LIMIT_AVERAGE:-100}"
      - "traefik.http.middlewares.langextract-ratelimit-${STACK_NAME:-prod}.ratelimit.burst=${RATE_LIMIT_BURST:-200}"
      
      # Apply Middlewares
      - "traefik.http.routers.langextract-${STACK_NAME:-prod}.middlewares=langextract-security-${STACK_NAME:-prod}${ENABLE_RATE_LIMIT:+,langextract-ratelimit-}${STACK_NAME:-prod}"
      
      # Portainer Labels
      - "io.portainer.accesscontrol.teams=${PORTAINER_TEAM:-langextract-team}"
      - "io.portainer.accesscontrol.users=${PORTAINER_USERS:-admin}"
      
      # Custom Labels
      - "app.name=langextract-api"
      - "app.version=${APP_VERSION:-latest}"
      - "app.environment=${ENVIRONMENT:-production}"
      - "app.stack=${STACK_NAME:-prod}"
      - "app.description=LangExtract API for document text extraction"
      - "maintainer=${MAINTAINER_EMAIL:-admin@yourdomain.com}"
      - "deployment.method=portainer"
      - "deployment.date=${DEPLOY_DATE}"

  # Optional: Redis for caching (uncomment if needed)
  redis:
    image: redis:7-alpine
    container_name: langextract-redis-${STACK_NAME:-prod}
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - langextract-redis-${STACK_NAME:-prod}:/data
    networks:
      - langextract-network
    healthcheck:
      test: ["CMD", "redis-cli", "${REDIS_PASSWORD:+--no-auth-warning -a $REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    labels:
      - "app.name=langextract-redis"
      - "app.stack=${STACK_NAME:-prod}"
      - "app.component=cache"

volumes:
  langextract-uploads-${STACK_NAME:-prod}:
    driver: local
    name: langextract-uploads-${STACK_NAME:-prod}
  
  langextract-logs-${STACK_NAME:-prod}:
    driver: local
    name: langextract-logs-${STACK_NAME:-prod}
  
  langextract-cache-${STACK_NAME:-prod}:
    driver: local
    name: langextract-cache-${STACK_NAME:-prod}
  
  langextract-redis-${STACK_NAME:-prod}:
    driver: local
    name: langextract-redis-${STACK_NAME:-prod}

networks:
  langextract-network:
    driver: bridge
    name: langextract-network-${STACK_NAME:-prod}
    ipam:
      config:
        - subnet: 172.22.0.0/16
    labels:
      - "app.name=langextract-network"
      - "app.stack=${STACK_NAME:-prod}"
      - "app.component=network"