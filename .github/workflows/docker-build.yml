name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate deployment artifact
      if: github.event_name != 'pull_request'
      run: |
        mkdir -p deployment
        cp docker-compose.yml deployment/ 2>/dev/null || true
        cp docker-compose.prod.yml deployment/ 2>/dev/null || true
        cp portainer-stack.yml deployment/ 2>/dev/null || true
        cp .env.example deployment/ 2>/dev/null || true
        cp -r scripts deployment/ 2>/dev/null || true
        tar -czf langextract-deployment-${{ github.sha }}.tar.gz deployment/

    - name: Upload deployment artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: langextract-deployment-${{ github.sha }}.tar.gz
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        python -m pytest test_api.py -v

    - name: Test Docker build
      run: |
        docker build -t test-image .
        docker run --rm -d --name test-container -p 8001:8001 test-image
        sleep 10
        curl -f http://localhost:8001/health || exit 1
        docker stop test-container

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment logic here
        # Example: webhook to Portainer, SSH to server, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment logic here
        # Example: webhook to Portainer, SSH to server, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Build and security scan completed successfully"
        else
          echo "❌ Build or security scan failed"
        fi
        # Add notification logic (Slack, Discord, email, etc.)